{
  "swagger": "2.0",
  "info": {
    "title": "BookVector",
    "description": "BookVector service API.",
    "version": "1.0.0",
    "contact": {
      "name": "API support",
      "url": "http://book-vector.herokuapp.com/support"
    }
  },
  "host": "book-vector.herokuapp.com",
  "basePath": "/v2",
  "schemes": [
      "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [{
    "basicAuth": []
  }],
  "paths": {
      "/book": {
        "post": {
          "tags": [
            "book"
          ],
          "summary": "Add a new book to the library.",
          "description": "Add a new book to the library.",
          "operationId": "addBook",
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Book object that needs to be added to the library.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Book"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "The operation was successful."
            },
            "404": {
              "description": "Book not found."
            },
            "400": {
              "description": "Invalid input."
            }
          }
        },
        "put": {
          "tags": [
            "book"
          ],
          "summary": "Update an existing book.",
          "description": "Update an existing book.",
          "operationId": "updateBook",
          "parameters": [
            {
              "description": "book object that needs to be added to the library.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Book"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied."
            },
            "401": {
              "description": "Unaurthorized"
            },
            "404": {
              "description": "book not found."
            },
            "200": {
              "description": "The operation was successful."
            }
          }
        }
      },
      "/book/{bookId}": {
        "get": {
          "tags": [
            "book"
          ],
          "summary": "Find book by ID.",
          "description": "Returns a single book by its ID.",
          "operationId": "getBook",
          "parameters": [
            {
              "name": "bookId",
              "in": "path",
              "description": "ID of book to return.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful operation.",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            },
            "400": {
              "description": "Invalid ID supplied."
            },
            "404": {
              "description": "Book not found."
            }
          }
        },
        "delete": {
          "tags": [
            "book"
          ],
          "summary": "Deletes a book.",
          "description": "Deletes a book.",
          "operationId": "deleteBook",
          "parameters": [
            {
              "name": "bookId",
              "in": "path",
              "description": "ID of the Book to delete.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Book not found."
            }
          }
        }
      },
      "/book/search": {
        "get": {
          "tags": [
            "book"
          ],
          "summary": "Get all books in the library by author or by year.",
          "description": "Get all books in the library by author or by year.",
          "operationId": "findBooks",
          "parameters": [
            {
              "name": "author",
              "in": "query",
              "description": "Author of the book to find.",
              "required": false,
              "type": "string"
            },
            {
              "name": "year",
              "in": "query",
              "description": "Year of the book to find.",
              "required": false,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Book"
                }
              }
            },
            "400": {
              "description": "Invalid input."
            }
          }
        }
      },
      "/copy": {
        "post": {
          "tags": [
            "copy"
          ],
          "summary": "Add a new copy of an existing book in the library.",
          "description": "Add a new copy of an existing book in the library.",
          "operationId": "addACopy",
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "the body of copy.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Copy"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "400": {
              "description": "Invalid input."
            }
          }
        },
        "put": {
          "tags": [
            "copy"
          ],
          "summary": "Update a copy of book in the library",
          "description": "Update a copy of book in the library",
          "operationId": "updateCopy",
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "the body of copy",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Copy"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "400": {
              "description": "Invalid input"
            }
          }
        }
      },
      "/copy/{copyId}/": {
        "get": {
          "tags": [
            "copy"
          ],
          "summary": "Get the copy of an existing book in the library by Id.",
          "description": "Get the copy of an existing book in the library by Id.",
          "operationId": "addCopy",
          "parameters": [
            {
              "name": "copyId",
              "in": "path",
              "description": "ID of the copy.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            },
            "401": {
              "description": "Copy not found."
            }
          }
        },
        "delete": {
          "tags": [
            "copy"
          ],
          "summary": "Delete a copy of an existing book in the library by Id.",
          "description": "Delete a copy of an existing book in the library by Id.",
          "operationId": "deleteCopy",
          "parameters": [
            {
              "name": "copyId",
              "in": "path",
              "description": "ID of the copy",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Copy not found."
            }
          }
        }
      },
      "/copy/search/": {
        "get": {
          "tags": [
            "copy"
          ],
          "summary": "Get all copies of a book in the library by book Id.",
          "description": "Get all copies of a book in the library by book Id.",
          "operationId": "findByBookId",
          "parameters": [
            {
              "name": "bookId",
              "in": "query",
              "description": "ID of the book to return.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Book"
                }
              }
            },
            "400": {
              "description": "Invalid input."
            }
          }
        }
      },
      "/order": {
        "post": {
          "tags": [
            "order"
          ],
          "summary": "Start a new order request.",
          "description": "Start a new order request.",
          "operationId": "addOrder",
          "parameters": [
            {
              "description": "The body of order.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            }
          }
        }
      },
      "/order/{orderId}/accept": {
        "post": {
          "tags": [
            "order"
          ],
          "summary": "Accept the order request.",
          "description": "Accept the order request.",
          "operationId": "acceptOrder",
          "parameters": [
            {
              "in": "path",
              "name": "orderId",
              "description": "the Id of order.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Order not found."
            }
          }
        }
      },
      "/order/{orderId}/decline": {
        "post": {
          "tags": [
            "order"
          ],
          "summary": "Decline the order request.",
          "description": "Decline the order request.",
          "operationId": "declineOrder",
          "parameters": [
            {
              "in": "path",
              "name": "orderId",
              "description": "the Id of order",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Order not found."
            }
          }
        }
      },
      "/order/{orderId}/updateStatus": {
        "put": {
          "tags": [
            "order"
          ],
          "summary": "Update the status of existing order.",
          "description": "Update the status of existing order.",
          "operationId": "updateOrderStatus",
          "parameters": [
            {
              "in": "path",
              "name": "orderId",
              "description": "the Id of order",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "status",
              "in": "body",
              "description": "Status values that need to be updated for this order.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "order not found."
            }
          }
        }
      },
      "/order/{orderId}/sendReminder": {
        "post": {
          "tags": [
            "order"
          ],
          "summary": "Send reminder to borrower.",
          "description": "Send reminder to borrower.",
          "operationId": "sendReminder",
          "parameters": [
            {
              "in": "path",
              "name": "orderId",
              "description": "the Id of order",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "message",
              "in": "boddy",
              "description": "Message to borrower.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Order not found."
            }
          }
        }
      },
      "/user": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Create user",
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Created user object.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The operation was successful."
            },
            "400": {
              "description": "Invalid input."
            }
          }
        }
      },
      "/user/login": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Logs user into the system.",
          "description": "Logs user into the system.",
          "operationId": "loginUser",
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "description": "The user name for login.",
              "required": true,
              "type": "string"
            },
            {
              "name": "password",
              "in": "query",
              "description": "The password for login in clear text.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "string"
              },
              "headers": {
                "X-Expires-After": {
                  "type": "string",
                  "format": "date-time",
                  "description": "date in UTC when token expires"
                }
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          }
        }
      },
      "/user/logout": {
        "delete": {
          "tags": [
            "user"
          ],
          "summary": "Logs out current logged in user session.",
          "description": "Logs out current logged in user session.",
          "operationId": "logoutUser",
          "parameters": [

          ],
          "responses": {
            "default": {
              "description": "Successful operation."
            }
          }
        }
      },
      "/user/{username}": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Get user by user name",
          "description": "Get user by user name.",
          "operationId": "getUserByName",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be fetched.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful operation.",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "put": {
          "tags": [
            "user"
          ],
          "summary": "Updated user",
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "name that need to be updated.",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Updated user object.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation."
            },
            "400": {
              "description": "Invalid user supplied."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "User not found."
            }
          }
        },
        "delete": {
          "tags": [
            "user"
          ],
          "summary": "Delete user",
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be deleted.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation."
            },
            "400": {
              "description": "Invalid username supplied."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "User not found."
            }
          }
        }
      },
      "/user/{username}/privateList": {
        "post": {
          "tags": [
            "privateList"
          ],
          "summary": "Add a new private list for user.",
          "description": "Add a new private list for user.",
          "operationId": "addPrivateList",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The username who owns the private list.",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "name",
              "description": "Name of private list to create.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation."
            },
            "400": {
              "description": "Invalid Request Body."
            },
            "401": {
              "description": "Unaurthorized"
            }
          }
        }
      },
      "/user/{username}/privateList/{privateListId}": {
        "delete": {
          "tags": [
            "privateList"
          ],
          "summary": "Delete private list by private list Id.",
          "description": "Delete private list by private list Id.",
          "operationId": "deletePrivateList",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The username who owns the private list.",
              "required": true,
              "type": "string"
            },
            {
              "name": "privateListId",
              "in": "path",
              "description": "The Id of private list.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid Id supplied."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Not found."
            }
          }
        },
        "get": {
          "tags": [
            "privateList"
          ],
          "summary": "Get private list by private list Id.",
          "description": "Get private list by private list Id.",
          "operationId": "getPrivateList",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The username who owns the private list.",
              "required": true,
              "type": "string"
            },
            {
              "name": "privateListId",
              "in": "path",
              "description": "The Id of private list.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful operation",
              "schema": {
                "$ref": "#/definitions/PrivateList"
              }
            },
            "400": {
              "description": "Invalid Id supplied."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Not found."
            }
          }
        }
      },
      "/user/{username}/privateList/{privateListId}/addBooks": {
        "post": {
          "tags": [
            "privateList"
          ],
          "summary": "Add books to private list.",
          "description": "Add books to private list.",
          "operationId": "getPrivateList",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The username who owns the private list.",
              "required": true,
              "type": "string"
            },
            {
              "name": "privateListId",
              "in": "path",
              "description": "The Id of private list.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "books",
              "description": "List of book Ids to add.",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation."
            },
            "400": {
              "description": "Invalid Id supplied."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Not found."
            }
          }
        }
      },
      "/user/{username}/privateList/{privateListId}/removeBooks": {
        "post": {
          "tags": [
            "privateList"
          ],
          "summary": "Remove books from private list.",
          "description": "Remove books from private list.",
          "operationId": "removePrivateList",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The username who owns the private list.",
              "required": true,
              "type": "string"
            },
            {
              "name": "privateListId",
              "in": "path",
              "description": "The Id of private list.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "books",
              "description": "List of book Ids to remove.",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation."
            },
            "400": {
              "description": "Invalid Id supplied."
            },
            "401": {
              "description": "Unaurthorized."
            },
            "404": {
              "description": "Not found."
            }
          }
        }
      }
    },
  "definitions": {
      "Book": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "year": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Information about a Book."
      },
      "PrivateList": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "books": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "Information about a Private List."
      },
      "Copy": {
        "type": "object",
        "required": [
          "user",
          "book",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "type": "integer",
            "format": "int64"
          },
          "book": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Information about a book copy."
      },
      "Order": {
        "type": "object",
        "required": [
          "borrowerId",
          "copy",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "borrowerId": {
            "type": "integer",
            "format": "int64"
          },
          "copy": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Information about an order."
      },
      "User": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        },
        "description": "Information about an user."
      }
    }
  }